// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package user

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserMethodClient is the client API for UserMethod service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserMethodClient interface {
	GetUser(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*User, error)
	GetUsersById(ctx context.Context, in *UsersRequest, opts ...grpc.CallOption) (*UserResponse, error)
}

type userMethodClient struct {
	cc grpc.ClientConnInterface
}

func NewUserMethodClient(cc grpc.ClientConnInterface) UserMethodClient {
	return &userMethodClient{cc}
}

func (c *userMethodClient) GetUser(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/user.UserMethod/GetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userMethodClient) GetUsersById(ctx context.Context, in *UsersRequest, opts ...grpc.CallOption) (*UserResponse, error) {
	out := new(UserResponse)
	err := c.cc.Invoke(ctx, "/user.UserMethod/GetUsersById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserMethodServer is the server API for UserMethod service.
// All implementations must embed UnimplementedUserMethodServer
// for forward compatibility
type UserMethodServer interface {
	GetUser(context.Context, *UserRequest) (*User, error)
	GetUsersById(context.Context, *UsersRequest) (*UserResponse, error)
	mustEmbedUnimplementedUserMethodServer()
}

// UnimplementedUserMethodServer must be embedded to have forward compatible implementations.
type UnimplementedUserMethodServer struct {
}

func (UnimplementedUserMethodServer) GetUser(context.Context, *UserRequest) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedUserMethodServer) GetUsersById(context.Context, *UsersRequest) (*UserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsersById not implemented")
}
func (UnimplementedUserMethodServer) mustEmbedUnimplementedUserMethodServer() {}

// UnsafeUserMethodServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserMethodServer will
// result in compilation errors.
type UnsafeUserMethodServer interface {
	mustEmbedUnimplementedUserMethodServer()
}

func RegisterUserMethodServer(s grpc.ServiceRegistrar, srv UserMethodServer) {
	s.RegisterService(&UserMethod_ServiceDesc, srv)
}

func _UserMethod_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserMethodServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserMethod/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserMethodServer).GetUser(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserMethod_GetUsersById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserMethodServer).GetUsersById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserMethod/GetUsersById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserMethodServer).GetUsersById(ctx, req.(*UsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserMethod_ServiceDesc is the grpc.ServiceDesc for UserMethod service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserMethod_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user.UserMethod",
	HandlerType: (*UserMethodServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUser",
			Handler:    _UserMethod_GetUser_Handler,
		},
		{
			MethodName: "GetUsersById",
			Handler:    _UserMethod_GetUsersById_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user/user.proto",
}
